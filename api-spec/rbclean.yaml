openapi: 3.0.0
servers:
  - url: https://api.rbclean.xyz
    description: API server
info:
  description: |
    SImple laundry service REST api
  version: 1.0.0
  title: RB CLEAN

security:
  - BearerAuth: []  

paths:
  /auth/register:
    post:
      tags:
        - Auth # see read me for all the list of tags
      description: Register new user
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schema:
                  $ref: '#/components/schemas/User'  
      responses:
        '201':
          description: User registered succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request

  /auth/login:
    post:
      tags:
        - Auth
      description: Login a user
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schema:
                  email:
                    description: Email of the user
                    type: string
                    format: email
                    example: john.smith@example.com
                  password:
                    description: the user's password
                    type: string 
      responses:
        '200':
          description: User logged in succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request

  /auth/forgot-password:
    post:
      tags:
        - Auth
      description: Request a password reset token/link
      operationId: forgotPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schema:
                  email:
                    description: email of the user
                    type: string
                    format: email
                    example: john.smith@example.com
      responses:
        '202':
          description: Reset password token sent
        '400':
          description: Bad request

  /auth/reset-password:
    post:
      tags:
        - Auth
      description: Reset the password of a user
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schema:
                  nonce:
                    description: authorization token
                    type: string
                  password:
                    description: the user's new password
                    type: string 
      responses:
        '301':
          description: Redirect to login page
        '400':
          description: Bad request

  /auth/verify-email:
    post:
      tags:
        - Auth
      description: Verify email address
      operationId: verifyEmail
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schema:
                  nonce:
                    description: authorization token
                    type: string
      responses:
        '200':
          description: verified
        '400':
          description: Bad request

  /auth/2fa:
    post:
      tags:
        - Auth
      description: Multifactor authentication
      operationId: 2fa
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schema:
                  shortCode:
                    description: 6 digit alfanumeric 2fa code
                    type: string
      responses:
        '200':
          description: verified
        '401':
          description: Unauthorized
    
  /notifications/push/{id}:
      get:
        tags:
          - Notifications
        description: Get a unique push notification by ID
        operationId: getPushNotificationById
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
            description: ID of the push notification to retrieve
        security:
          - BearerAuth: []
        responses:
          '200':
            description: Push notification details
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Notification'
            example:
              id: "notification_12345"
              content:
                title: "Cleaning Complete"
                body: "Your home cleaning is complete. We hope you are satisfied with the service!"
              sentAt: "2024-08-10T10:00:00Z"
          '401':
            description: Unauthorized
          '404':
            description: Notification not found
  
  /notifications/push:
      get:
        tags:
          - Notifications
        description: Get a list of all user's push notifications
        operationId: getAllPushNotifications
        parameters:
          - name: read
            in: query
            required: false
            schema:
              type: boolean
            description: Filter notifications by read/unread status
        security:
          - BearerAuth: []
        responses:
          '200':
            description: List of push notifications
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Notification'
          '401':
            description: Unauthorized

  /notifications/{type}:
    post:
      tags:
        - Notifications
      description: Send a notification (SMS, EMAIL, or PUSH)
      operationId: sendNotification
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum: 
              - SMS
              - EMAIL
              - PUSH
          description: Type of notification to send
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: object
                  properties:
                    title:
                      type: string
                      required: true
                      description: Title of the notification (for EMAIL, SMS, and PUSH)
                      example: "Verify your email account"
                    body:
                      type: string
                      required: true
                      description: Body of the notification
                      example: null
                    html:
                      type: string
                      required: false
                      description: Message content for EMAIL notifications
                      example: "<p>Click the link below to verify your account. <a href='https://app.rbclean.xyz/verify?token=eyJhbGciOiJIUzI1NiIs...2YjJiMjBiM2Y0MTYxNGUyNmI1ZWM4OCIsI'>Verify</a></p>"
              required:
                - content
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Notification sent successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /notifications/push/{id}/read:
    patch:
      tags:
        - Notifications
      description: Mark a push notification as read
      operationId: markPushNotificationAsRead
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the push notification to mark as read
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Notification marked as read
        '401':
          description: Unauthorized
        '404':
          description: Notification not found

  /notifications/push/{id}/:
    delete:
      tags:
        - Notifications
      description: Delete a push notification
      operationId: deletePushNotification
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the push notification to delete
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Notification deleted
        '401':
          description: Unauthorized
        '404':
          description: Notification not found

#
# USER SERVICES PATHS STARTS HERE
#

  /profile:
    get:
      tags:
        - User
      summary: Get user profile
      operationId: getUserProfile
      responses:
        "200":
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
    put:
      tags:
        - User
      summary: Update user profile
      operationId: updateUserProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: Profile updated
        "400":
          description: Bad request
        "401":
          description: Unauthorized
    delete:
      tags:
        - User
      summary: Delete user account
      operationId: deleteUserAccount
      responses:
        "204":
          description: Account deleted
        "401":
          description: Unauthorized
#
# REPORTS SERVICES PATHS STARTS HERE
#

  /reports:
    get:
      summary: Get all reports
      tags:
        - reports
      parameters:
        - in: query
          name: startDate
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, completed, cancelled]
      responses:
        '200':
          description: Successful response
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
        '400':
          description: Bad request
    post:
      summary: Create a new report
      tags:
        - reports
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportInput'
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '400':
          description: Bad request

  /reports/{id}:
    get:
      summary: Get a report by ID
      tags:
        - reports
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '404':
          description: Report not found
    put:
      summary: Update a report
      tags:
        - reports
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportInput'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '404':
          description: Report not found
        '400':
          description: Bad request

# order requests
  /orders:
    post: 
        tags:
          - Orders
        summary: create a new order
        operationId: createOrder
        security:
         - bearerAuth: []
        description: creating new order this action can online only be performed by login users
        parameters:
          - name: user_id
            in: path
            required: true
        requestBody:
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrder'
        responses:
         '201':
            description: Order created successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Order'
         '400':
            description: Bad request

  /orders/{order_id}:
    put:
      tags:
        - Orders
      summary: update an existing order
      operationId: updateOrder
      security: 
        - bearerAuth: []
      description: update existing order this can only be done by login users.
      parameters: 
        - name: id
          in: path
          description: ID of order to be returned
          required: true
          schema: 
            type: string
      requestBody:
       content: 
        application/json:
          schema:
            type: object
            example: 
              "service_type": "deep_cleaning"
              "status": "pressing"
              "description": "i need my white floor capet cleaned, i will it the job done and completed weekend"
              "image_url": "carpet-image.png"
              "address": "Jouvence Yaounde"
      responses: 
       '201':
          description: Order updated successfully
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/Order'
       '400':
          description: bad request
       '404':
          description: Order not found

  /orders/: 
    get:
      tags:
        - Orders
      operationId: getAllOrders
      summary: get all orders
      parameters:
      - name: status
      - name: user_id
      - name: agent_id
        in: query
      security: 
        - bearerAuth: []
      description: "get a list of all orders"
      responses:
       '201':
          description: operation sussseccfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
       '400':
          description: bad request

  /orders/{id}:
    get: 
      tags:
        - Orders
      summary: get order by id
      description: get Orders by ID
      operationId: getOrderById 
      security: 
        - bearerAuth: []
      parameters: 
        - name: id
          in: path
          description: ID of the order to be returned
          required: true
          schema: 
            type: string
      responses: 
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
        '400':
          description: bad request
        '404':
          description: Order not found


  /orders/{order_id}/:
    delete:
      tags:
        - Orders
      summary: Delete order
      operationId: deleteOrder
      security: 
        - bearerAuth: []
      description: This can only be done by the logged in user.
      parameters:
        - name: order_id
          in: path
          description: The id of the order to be deleted
          required: true
          schema:
            type: string
      responses:
        '204':
          description: order deleted successfully
        '400':
          description: Invalid orderId supplied
        '404':
          description: Order not found
    
      
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string

    User:
      description: A user of our system
      type: object
      properties:
        email:
          type: string
          required: false
        password:
          type: string
          required: false
        name:
          type: string
        role:
          type: string
          enum:
            - CLIENT
            - ADMIN
        joinedAt:
          type: date-time
        phoneNumber:
          type: string 
        pictureUrl:
          type: string
        address:
          type: string
        sex:
          type: string 
          enum: [Male,Female]
          required: false

    UserUpdate:
      type: object
      properties:
        name:
          type: string
          required: false
        phoneNumber:
          type: string
          required: false
        pictureUrl:
          type: string
          required: false
        address:
          type: string
          required: false
        sex:
          type: string 
          enum: [Male,Female]
          required: false
#
# REPORTS SCHEMAS
#
    Report:
      type: object
      properties:
        id:
          type: string
        customerName:
          type: string
        customerEmail:
          type: string
        createdAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, completed, cancelled]
        type:
          type: string
          enum: [pickup, delivery, wash_and_fold]
        items:
          type: array
          items:
            $ref: '#/components/schemas/ReportItem'
        total:
          type: number
          format: float
    ReportItem:
      type: object
      properties:
        name:
          type: string
        quantity:
          type: integer
        price:
          type: number
          format: float
    ReportInput:
      type: object
      properties:
        customerName:
          type: string
        customerEmail:
          type: string
        type:
          type: string
          enum: [pickup, delivery, wash_and_fold]
        items:
          type: array
          items:
            $ref: '#/components/schemas/ReportItem'

    Notification:
      description: A user's push notifications
      type: object
      properties:
        id: 
          type: string
        content:
          type: object
          properties:
            title: 
              type: string
              required: true
            body:
              type: string
              required: true
        readStatus:
          type: boolean
        sentAt:
          type: string
          format: date-time
#Order
    Order:
      description: cleaning service order details
      type: object
      properties: 
        id: 
          type: string
        user_id: 
          type: string
          required: ["true"]
        argent_id: 
          type: string
          required: ["true"]
        service_type: 
          type: string
          required: ["BASIC_CLEANING", "DRY_CLEANING", "PRESSING", "DEEP_CLEANING"]
        status: 
          type: string
          required : ['PENDING', 'CONFIRMED', 'IN_PROGRESS', 'COMPLETED', 'CANCELED', "DELIVERED"]
        ordered_on: 
          type: "dateTime"
          example:  "2010-01-12T05:23:19+0000"
        description:
          type: string
          required: ["true"]
        image_url: 
          type: string
        address: 
          type: string

    UpdateOrder:
      description: update order data details
      type: object
      properties: 
        service_type: 
          type: string
          required: ["BASIC_CLEANING", "DRY_CLEANING", "PRESSING", "DEEP_CLEANING"]
        status: 
          type: string
          required : ['PENDING', 'CONFIRMED', 'IN_PROGRESS', 'COMPLETED', 'CANCELED', "DELIVERED"]
        description:
          type: string
          required: ["true"]
        image_url: 
          type: string
        address: 
          type: string  

    CreateOrder:
      description: cleaning service order details
      type: object
      properties: 
        id: 
          type: string
        argent_id: 
          type: string
          required: ["true"]
        service_type: 
          type: string
          required: ["BASIC_CLEANING", "DRY_CLEANING", "PRESSING", "DEEP_CLEANING"]
        status: 
          type: string
          required : ['PENDING', 'CONFIRMED', 'IN_PROGRESS', 'COMPLETED', 'CANCELED', "DELIVERED"]
        ordered_on: 
          type: "dateTime"
          example:  "2010-01-12T05:23:19+0000"
        description:
          type: string
          required: ["true"]
        image_url: 
          type: string
        address: 
          type: string  